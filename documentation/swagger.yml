swagger: "2.0"
info:
  description: This is a simple Test API
  version: 1.0.0
  title: Blog API
  # put the contact info for your development or API team
  contact:
    email: edujav21@gmail.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations

paths:
  /users:
    get:
      tags:
        - developers
      summary: get users from fake API
      operationId: getUsers
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      produces:
        - application/json
      parameters:
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          minimum: 0
          maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        500:
          description: Server Error
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: Server Error
  /users/{userId}:
    get:
      tags:
        - developers
      summary: get one user from fake API
      operationId: getUser
      description: |
        By passing in the appropriate options, you can get the specific user
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          description: unique user identifier
          type: integer
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            required:
              - user
            properties:
              user:
                $ref: "#/definitions/User"
        500:
          description: Server Error
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: Server Error
        404:
          description: User Not found
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: User not found
  /users/{userId}/posts:
    get:
      tags:
        - developers
      summary: get user posts from fake API
      operationId: getUserPosts
      description: |
        Get user post from fake API
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          description: userId
          required: true
          type: integer
        - in: query
          name: offset
          description: number of records to skip for pagination
          type: integer
          minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          type: integer
          minimum: 0
          maximum: 50
      responses:
        200:
          description: sucessful response for list of user posts
          schema:
            type: array
            items:
              $ref: "#/definitions/Post"
        500:
          description: Server Error
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: Server Error
    post:
      tags:
        - developers
      summary: create new user post
      description: |
        Create a new user post into fake api
      consumes:
        - application/json
      parameters:
        - in: path
          name: userId
          description: userId
          required: true
          type: integer
        - in: body
          name: user
          description: User to create
          schema:
            type: object
            required:
              - id
              - userId
              - title
              - body
            properties:
              id:
                type: integer
                example: 1
              userId:
                type: integer
                example: 3
              title:
                type: string
                example: "New Post"
              body:
                type: string
                example: "This is a post content"
      responses:
        201:
          description: Successful response when creating user post
          schema:
            type: array
            items:
              $ref: "#/definitions/Post"
        500:
          description: Server Error
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
                example: Server Error
definitions:
  User:
    type: object
    required:
      - id
      - name
      - username
      - phone
      - email
      - website
      - address
      - company
    properties:
      id:
        type: integer
        example: 1025
      name:
        type: string
        example: Luis Lopez
      username:
        type: string
        example: luisl
      phone:
        type: string
        example: 1-770-736-8031 x56442
      email:
        type: string
        example: Sincere@april.biz
      website:
        type: string
        example: hildegard.org
      address:
        $ref: "#/definitions/Address"
      company:
        $ref: "#/definitions/Company"
  Address:
    required:
      - street
      - suite
      - city
      - zipcode
      - geo
    properties:
      street:
        type: string
        example: Kulas Light
      suite:
        type: string
        example: Apt. 556
      city:
        type: string
        example: Gwenborough
      zipcode:
        type: string
        example: 92998-3874
      geo:
        $ref: "#/definitions/Geo"
  Geo:
    required:
      - lat
      - lng
    properties:
      lat:
        type: string
        example: -37.3159
      lng:
        type: string
        example: 81.1496
  Company:
    required:
      - name
      - catchPhrase
      - bs
    properties:
      name:
        type: string
        example: Romaguera-Crona
      catchPhrase:
        type: string
        example: Multi-layered client-server neural-net
      bs:
        type: string
        example: harness real-time e-markets
  Post:
    required:
      - id
      - userId
      - title
      - body
    properties:
      id:
        type: integer
        example: 2
      userId:
        type: integer
        example: 4
      title:
        type: string
        example: "title of post"
      body:
        type: string
        example: "body of post"
